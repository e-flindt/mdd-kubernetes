# This template is a collection of all functions that are required for the workflow to work.
# Requires a pre-built container image 'urllib3-docker'.
# See https://argoproj.github.io/argo-workflows/workflow-templates/
# and https://argoproj.github.io/argo-workflows/fields/
apiVersion: argoproj.io/v1alpha1
kind: ClusterWorkflowTemplate
metadata:
  name: mdd-workflow-template
spec:
  entrypoint: on-change
  templates:

  # On Change
  - name: on-change
    inputs:
      parameters:
      - name: commit
      - name: fullname
    steps:
    # This step increments the artifact version
    # This would usually be done by the repository
    - - name: increment-version
        template: increment-version
        arguments:
          parameters:
          - name: fullname
            value: '{{inputs.parameters.fullname}}'
    # Now all metamodels are fetched
    - - name: get-metamodels
        template: get-metamodels
        arguments:
          parameters:
          - name: version
            value: '{{steps.increment-version.outputs.result}}'
    # This step fetches all artifacts that have metamodels as input but no output
    # All consumer will be executed in parallel
    - - name: consume-step
        template: consume-step
        arguments:
          parameters:
          - name: commit
            value: '{{inputs.parameters.commit}}'
          - name: version
            value: '{{item}}'
        withParam: '{{steps.get-metamodels.outputs.result}}'
    # This step fetches all transformations and input metamodels in parallel
    # Transformations will be executed as echo templates
    # After the input metamodels are fetched, their instances will be retrieved
    - - name: get-transformations-step
        template: get-transformations-step
        arguments:
          parameters:
          - name: commit
            value: '{{inputs.parameters.commit}}'
          - name: version
            value: '{{item}}'
        withParam: '{{steps.get-metamodels.outputs.result}}'
      - name: get-inputs-step
        template: get-inputs-step
        arguments:
          parameters:
          - name: commit
            value: '{{inputs.parameters.commit}}'
          - name: version
            value: '{{steps.increment-version.outputs.result}}'

  - name: consume-step
    inputs:
      parameters:
      - name: commit
      - name: version
    dag:
      tasks:
      - name: get-consumers
        template: get-consumers
        arguments:
          parameters:
          - name: version
            value: '{{inputs.parameters.version}}'
      - name: consume
        template: echo
        arguments:
          parameters:
          - name: message
            value: '{{item}} {{inputs.parameters.commit}}'
        withParam: '{{tasks.get-consumers.outputs.result}}'
        depends: 'get-consumers'

  - name: get-metamodels-step
    inputs:
      parameters:
      - name: commit
      - name: version
    dag:
      tasks:
      - name: get-metamodels
        template: get-metamodels
        arguments:
          parameters:
          - name: version
            value: '{{inputs.parameters.version}}'
      - name: get-transformations-step
        template: get-transformations-step
        arguments:
          parameters:
          - name: commit
            value: '{{inputs.parameters.commit}}'
          - name: version
            value: '{{item}}'
        withParam: '{{tasks.get-metamodels.outputs.result}}'
        depends: 'get-metamodels'

  - name: get-transformations-step
    inputs:
      parameters:
      - name: commit
      - name: version
    dag:
      tasks:
      - name: get-transformations
        template: get-transformations
        arguments:
          parameters:
          - name: version
            value: '{{inputs.parameters.version}}'
      - name: transform-with-artefact
        template: echo
        arguments:
          parameters:
          - name: message
            value: '{{item}} {{inputs.parameters.commit}}'
        withParam: '{{tasks.get-transformations.outputs.result}}'
        depends: 'get-transformations'

  - name: get-inputs-step
    inputs:
      parameters:
      - name: commit
      - name: version
    dag:
      tasks:
      - name: get-inputs
        template: get-inputs
        arguments:
          parameters:
          - name: version
            value: '{{inputs.parameters.version}}'
      - name: get-instances-step
        template: get-instances-step
        arguments:
          parameters:
          - name: commit
            value: '{{inputs.parameters.commit}}'
          - name: version
            value: '{{item}}'
        withParam: '{{tasks.get-inputs.outputs.result}}'
        depends: 'get-inputs'

  - name: get-instances-step
    inputs:
      parameters:
      - name: commit
      - name: version
    dag:
      tasks:
      - name: get-instances
        template: get-instances
        arguments:
          parameters:
          - name: version
            value: '{{inputs.parameters.version}}'
      - name: transform-with-instance
        template: echo
        arguments:
          parameters:
          - name: message
            value: '{{item}} {{inputs.parameters.commit}}'
        withParam: '{{tasks.get-instances.outputs.result}}'
        depends: 'get-instances'

  # Increment version of artifact
  - name: increment-version
    inputs:
      parameters:
      - name: fullname
    script:
      image: urllib3-docker
      # https://stackoverflow.com/a/52763242
      imagePullPolicy: Never
      command: [python]
      source: |
        import sys, json, urllib3

        fullName = '{{inputs.parameters.fullname}}'

        versionPrefix = 'version-'

        headers = urllib3.make_headers(basic_auth='gitea-admin:password')
        headers['Content-Type']='application/json'
        http = urllib3.PoolManager()

        r = http.request('GET', f'http://infra-gitea-http.default.svc.cluster.local/api/v1/repos/{fullName}/topics', headers=headers)
        topics = json.loads(r.data.decode('utf-8'))['topics']
        incremented = []
        for topic in topics:
            if topic.startswith(versionPrefix):
                index = topic.rindex('-')
                newVersion = topic[:index] + '-' + str(int(topic[index+1:]) + 1)
                http.request('DELETE', f'http://infra-gitea-http.default.svc.cluster.local/api/v1/repos/{fullName}/topics/{topic}', headers=headers)
                http.request('PUT', f'http://infra-gitea-http.default.svc.cluster.local/api/v1/repos/{fullName}/topics/{newVersion}', headers=headers)
                incremented.append(newVersion)
        json.dump(incremented[0], sys.stdout)

  # Get metamodels of artifact
  - name: get-metamodels
    inputs:
      parameters:
      - name: version
    script:
      image: urllib3-docker
      imagePullPolicy: Never
      command: [python]
      source: |
        import sys, json, urllib3

        version = {{inputs.parameters.version}}

        versionPrefix = 'version-'
        instanceofPrefix = 'instanceof-'

        headers = urllib3.make_headers(basic_auth='gitea-admin:password')
        headers['Content-Type']='application/json'
        http = urllib3.PoolManager()

        def requestToJSON(request):
            return json.loads(request.data.decode('utf-8'))

        metamodels = []
        if version.startswith(versionPrefix):
            artefactRepos = requestToJSON(http.request('GET', f'http://infra-gitea-http.default.svc.cluster.local/api/v1/repos/search?q={version}&topic=true', headers=headers))['data']
            for artefactRepo in artefactRepos:
                artefactFullname = artefactRepo['full_name']
                artefactTopics = requestToJSON(http.request('GET', f'http://infra-gitea-http.default.svc.cluster.local/api/v1/repos/{artefactFullname}/topics', headers=headers))['topics']
                for artefactTopic in artefactTopics:
                    if artefactTopic.startswith(instanceofPrefix):
                        metamodels.append(versionPrefix + artefactTopic[len(instanceofPrefix):])
        json.dump(metamodels, sys.stdout)

  # Get consumer of given metamodel
  - name: get-consumers
    inputs:
      parameters:
      - name: version
    script:
      image: urllib3-docker
      imagePullPolicy: Never
      command: [python]
      source: |
        import sys, json, urllib3

        version = '{{inputs.parameters.version}}'

        versionPrefix = 'version-'
        inputPrefix = 'input-'
        outputPrefix = 'output-'

        headers = urllib3.make_headers(basic_auth='gitea-admin:password')
        headers['Content-Type']='application/json'
        http = urllib3.PoolManager()

        def requestToJSON(request):
            return json.loads(request.data.decode('utf-8'))

        accepting = []
        if version.startswith(versionPrefix):
            instanceTopic = inputPrefix + version[len(versionPrefix):]
            instanceRepos = requestToJSON(http.request('GET', f'http://infra-gitea-http.default.svc.cluster.local/api/v1/repos/search?q={instanceTopic}&topic=true', headers=headers))['data']
            for instanceRepo in instanceRepos:
                instanceFullname = instanceRepo['full_name']
                instanceTopics = requestToJSON(http.request('GET', f'http://infra-gitea-http.default.svc.cluster.local/api/v1/repos/{instanceFullname}/topics', headers=headers))['topics']
                if (not any(instanceTopic.startswith(outputPrefix) for instanceTopic in instanceTopics)):
                    for instanceTopic in instanceTopics:
                        if instanceTopic.startswith(versionPrefix):
                            accepting.append(instanceTopic)
        json.dump(accepting, sys.stdout)

  # Get all transformation that accept instances of this version
  - name: get-transformations
    inputs:
      parameters:
      - name: version
    script:
      image: urllib3-docker
      imagePullPolicy: Never
      command: [python]
      source: |
        import sys, json, urllib3

        version = '{{inputs.parameters.version}}'

        versionPrefix = 'version-'
        inputPrefix = 'input-'
        outputPrefix = 'output-'

        headers = urllib3.make_headers(basic_auth='gitea-admin:password')
        headers['Content-Type']='application/json'
        http = urllib3.PoolManager()

        def requestToJSON(request):
            return json.loads(request.data.decode('utf-8'))

        accepting = []
        if version.startswith(versionPrefix):
            instanceTopic = inputPrefix + version[len(versionPrefix):]
            instanceRepos = requestToJSON(http.request('GET', f'http://infra-gitea-http.default.svc.cluster.local/api/v1/repos/search?q={instanceTopic}&topic=true', headers=headers))['data']
            for instanceRepo in instanceRepos:
                instanceFullname = instanceRepo['full_name']
                instanceTopics = requestToJSON(http.request('GET', f'http://infra-gitea-http.default.svc.cluster.local/api/v1/repos/{instanceFullname}/topics', headers=headers))['topics']
                if any(instanceTopic.startswith(outputPrefix) for instanceTopic in instanceTopics):
                    for instanceTopic in instanceTopics:
                        if instanceTopic.startswith(versionPrefix):
                            accepting.append(instanceTopic)
        json.dump(accepting, sys.stdout)

  # Get input metamodels of artefact
  - name: get-inputs
    inputs:
      parameters:
      - name: version
    script:
      image: urllib3-docker
      imagePullPolicy: Never
      command: [python]
      source: |
        import sys, json, urllib3

        version = {{inputs.parameters.version}}

        versionPrefix = 'version-'
        inputPrefix = 'input-'

        headers = urllib3.make_headers(basic_auth='gitea-admin:password')
        headers['Content-Type']='application/json'
        http = urllib3.PoolManager()

        def requestToJSON(request):
            return json.loads(request.data.decode('utf-8'))

        inputs = []
        if version.startswith(versionPrefix):
            artefactRepos = requestToJSON(http.request('GET', f'http://infra-gitea-http.default.svc.cluster.local/api/v1/repos/search?q={version}&topic=true', headers=headers))['data']
            for artefactRepo in artefactRepos:
                artefactFullname = artefactRepo['full_name']
                artefactTopics = requestToJSON(http.request('GET', f'http://infra-gitea-http.default.svc.cluster.local/api/v1/repos/{artefactFullname}/topics', headers=headers))['topics']
                for artefactTopic in artefactTopics:
                    if artefactTopic.startswith(inputPrefix):
                        inputs.append(versionPrefix + artefactTopic[len(inputPrefix):])
        json.dump(inputs, sys.stdout)

  # Get instances of metamodel
  - name: get-instances
    inputs:
      parameters:
      - name: version
    script:
      image: urllib3-docker
      imagePullPolicy: Never
      command: [python]
      source: |
        import sys, json, urllib3

        version = '{{inputs.parameters.version}}'

        versionPrefix = 'version-'
        instanceofPrefix = 'instanceof-'

        headers = urllib3.make_headers(basic_auth='gitea-admin:password')
        headers['Content-Type']='application/json'
        http = urllib3.PoolManager()

        def requestToJSON(request):
            return json.loads(request.data.decode('utf-8'))

        instances = []
        if version.startswith(versionPrefix):
            instanceTopic = instanceofPrefix + version[len(versionPrefix):]
            instanceRepos = requestToJSON(http.request('GET', f'http://infra-gitea-http.default.svc.cluster.local/api/v1/repos/search?q={instanceTopic}&topic=true', headers=headers))['data']
            for instanceRepo in instanceRepos:
                instanceFullname = instanceRepo['full_name']
                instanceTopics = requestToJSON(http.request('GET', f'http://infra-gitea-http.default.svc.cluster.local/api/v1/repos/{instanceFullname}/topics', headers=headers))['topics']
                for instanceTopic in instanceTopics:
                    if instanceTopic.startswith(versionPrefix):
                        instances.append(instanceTopic)
        json.dump(instances, sys.stdout)

  # Simple echo utility
  - name: echo
    inputs:
      parameters:
      - name: message
    container:
      image: alpine
      command: ['echo']
      args: ['{{inputs.parameters.message}}']
      
      